# -*- coding: utf-8 -*-
"""proyecto.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1aXPhQ9Y2XLDXoPZnsMTvmQjIY4e5TXWB
"""

import numpy as np
import pandas as pd
import csv
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.cluster import KMeans

df = pd.read_csv('covid19_tweets.csv')

"""## Días de mayor actividad entre bots"""

# Filtrar el DataFrame para incluir filas donde la fuente incluya 'bot',
# o el nombre de usuario incluya 'bot', o los hashtags incluyan 'bot'
df_bots = df[
    (df["source"].str.contains("bot"  or "Bot", na=False))
    | (df["user_name"].str.contains("bot" or "Bot", na=False))
    | (df["hashtags"].str.contains("bot" or "Bot", na=False))
]

# Agrupar el DataFrame por fecha y contar el número de filas en cada grupo
df_grouped_date = df_bots["date"].str[:10].groupby(df_bots["date"].str[:10]).size()

# Crear un histograma del DataFrame agrupado
plt.figure(figsize=(9, 5))
df_grouped_date.plot(kind="bar")
plt.title(
    'Número de Tweets por Fecha con "bot" en la Fuente, Nombre de Usuario o Hashtags'
)
plt.xlabel("Fecha")
plt.ylabel("Cantidad de Tweets")
plt.show()

"""# Horas de mayor actividad entre bots"""

# Agrupar el DataFrame por hora y contar el número de filas en cada grupo
df_grouped_hour = df_bots["date"].str[10:13].groupby(df_bots["date"].str[10:13]).size()

# Crear un histograma del DataFrame agrupado
plt.figure(figsize=(9, 5))
df_grouped_hour.plot(kind="bar")
plt.title(
    'Número de Tweets por hora con "bot" en la Fuente, Nombre de Usuario o Hashtags'
)
plt.xlabel("Horas")
plt.ylabel("Cantidad de Tweets")
plt.show()

# Agrupar el DataFrame por hora (hh:mm) y contar el número de filas en cada grupo
df_grouped_time = df_bots["date"].str[10:16].groupby(df_bots["date"].str[10:16]).size()

# Crear un histograma del DataFrame agrupado
plt.figure(figsize=(9, 5))
df_grouped_time.plot(kind="bar")
plt.title(
    'Número de Tweets por hora con "bot" en la Fuente, Nombre de Usuario o Hashtags'
)
plt.xlabel("Hora (hh:mm)")
plt.ylabel("Cantidad de Tweets")
plt.show()

"""# Correlaciones entre fecha y número de tweets para Bots y usuarios normales"""

# Extraer la columna de fecha y convertirla al formato datetime
df_bots2 = df_bots.copy()
df_bots2["date"] = df_bots2["date"].str[:10]
df_bots2["date"] = pd.to_datetime(df_bots2["date"])

# Calcular el recuento diario de tweets relevantes
daily_counts = df_bots2["date"].value_counts()
# Crear un nuevo DataFrame con la fecha y el recuento diario
date_count_df = pd.DataFrame({"date": daily_counts.index, "count": daily_counts.values})
# Graficar el mapa de correlación para los tweets filtrados
plt.figure(figsize=(9, 5))
correlation_map = sns.heatmap(date_count_df.corr(), annot=True, cmap="twilight", vmin=-1, vmax=1)
correlation_map.set_title(
    "Mapa de Correlación: Fecha vs. Recuento Diario de Tweets que Contienen 'bot'"
)
plt.show()


# Mostrar el mapa de correlación para los tweets no filtrados
df2 = df.copy()
df2["date"] = df2["date"].str[:10]
df2["date"] = pd.to_datetime(df2["date"])
daily_counts = df2["date"].value_counts()
plt.figure(figsize=(9, 5))
date_count_df = pd.DataFrame({"date": daily_counts.index, "count": daily_counts.values})
correlation_map = sns.heatmap(date_count_df.corr(), annot=True, cmap="twilight", vmin=-1, vmax=1)
correlation_map.set_title("Mapa de Correlación: Fecha vs. Recuento Diario de Tweets")
plt.show()

"""# Correlacion hora y número de tweets para bots y usuarios normales"""

# Extraer la columna de fecha y convertirla al formato datetime usando solo las horas
df_bots2 = df_bots.copy()
df_bots2["date"] = df_bots2["date"].str[10:13]

# Calcular el recuento por horas de tweets relevantes
daily_counts = df_bots2["date"].value_counts()
# Crear un nuevo DataFrame con la hora y el recuento diario
date_count_df = pd.DataFrame({"date": daily_counts.index, "count": daily_counts.values})
# Graficar el mapa de correlación para los tweets filtrados
plt.figure(figsize=(9, 5))
correlation_map = sns.heatmap(date_count_df.corr(), annot=True, cmap="twilight", vmin=-1, vmax=1)
correlation_map.set_title(
    "Mapa de Correlación: Hora vs. Recuento de Tweets que Contienen 'bot'"
)
plt.show()

# Mostrar el mapa de correlación para los tweets no filtrados
df2 = df.copy()
df2["date"] = df2["date"].str[10:13]
daily_counts = df2["date"].value_counts()
plt.figure(figsize=(9, 5))
date_count_df = pd.DataFrame({"date": daily_counts.index, "count": daily_counts.values})
correlation_map = sns.heatmap(date_count_df.corr(), annot=True, cmap="twilight", vmin=-1, vmax=1)
correlation_map.set_title("Mapa de Correlación: Hora vs. Recuento de Tweets")
plt.show()

"""# Correlacion entre Hora (hh:mm) y recuento de Tweets para robots y usuarios"""

# Extraer la columna de fecha y convertirla al formato datetime usando solo las horas
df_bots2 = df_bots.copy()
df_bots2["date"] = df_bots2["date"].str[10:16]
df_bots2["date"] = df_bots2["date"].str.replace(" ", "")
df_bots2["date"] = df_bots2["date"].str.replace(":", ".")

# Calcular el recuento por horas de tweets relevantes
daily_counts = df_bots2["date"].value_counts()
# Crear un nuevo DataFrame con la fecha y el recuento diario
date_count_df = pd.DataFrame({"date": daily_counts.index, "count": daily_counts.values})
# Graficar el mapa de correlación para los tweets filtrados
plt.figure(figsize=(10, 5))
correlation_map = sns.heatmap(date_count_df.corr(), annot=True, cmap="twilight", vmin=-1, vmax=1)
correlation_map.set_title(
    "Mapa de Correlación: Hora (hh:mm) vs. Recuento de Tweets que Contienen 'bot'"
)
plt.show()


# Mostrar el mapa de correlación para los tweets no filtrados
df2 = df.copy()
df2["date"] = df2["date"].str[10:16]
df2["date"] = df2["date"].str.replace(" ", "")
df2["date"] = df2["date"].str.replace(":", ".")
daily_counts = df2["date"].value_counts()
plt.figure(figsize=(10, 5))
date_count_df = pd.DataFrame({"date": daily_counts.index, "count": daily_counts.values})
correlation_map = sns.heatmap(date_count_df.corr(), annot=True, cmap="twilight", vmin=-1, vmax=1)
correlation_map.set_title("Mapa de Correlación: Hora (hh:mm) vs. Recuento de Tweets")
plt.show()

"""# Diagramas descriptivos de variables numéricas con solo valores de bots

"""

df_bots = df[
    (df["source"].str.contains("bot"  or "Bot", na=False))
    | (df["user_name"].str.contains("bot" or "Bot", na=False))
    | (df["hashtags"].str.contains("bot" or "Bot", na=False))
]

df_bots_filtered = df_bots[df_bots['user_followers'] <= 100000]

plt.figure(figsize=(9, 5))
sns.boxplot(x='user_followers', data=df_bots_filtered)
plt.title('Distribución de Seguidores de Bots (Sin Valores Atípicos)')
plt.xlabel('Seguidores')
plt.show()

df_bots_filtered = df_bots[df_bots['user_friends'] <= 8000]

plt.figure(figsize=(9, 5))
sns.boxplot(x='user_friends', data=df_bots_filtered)
plt.title('Distribución de Amigos de Bots (Sin Valores Atípicos)')
plt.xlabel('Amigos')
plt.show()

sns.boxplot(data=df, y="user_followers", x="user_friends")

plt.figure(figsize=(8, 6))
sns.heatmap(df_bots[['user_followers', 'user_friends', 'user_favourites']].corr(), annot=True, cmap="YlGnBu")
plt.title('Mapa de Calor de Correlación de Variables Numéricas de Bots')
plt.show()

df[['user_followers','user_friends','user_favourites']].corr()

df.plot.scatter(x='user_followers' , y='user_friends')

X = df[['user_followers', 'user_friends']].dropna()

from sklearn.cluster import KMeans
inertia = []
for k in range(1, 11):
    kmeans = KMeans(n_clusters=k)
    kmeans.fit(X)
    inertia.append(kmeans.inertia_)

plt.figure(figsize=(8, 3))
plt.plot(range(1, 11), inertia, marker="o")
plt.xlabel("Número de Clusters")
plt.ylabel("Inercia")
plt.title("Método del Codo")
plt.show()

m=KMeans(4)
m.fit(X)
X["cl"]=m.labels_
X.plot.scatter(x='user_followers' , y='user_friends',c="cl",colormap='gist_rainbow')

centros = m.cluster_centers_
print("Centros de los clusters:")
print(centros)